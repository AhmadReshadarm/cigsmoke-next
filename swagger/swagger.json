{
  "swagger": "2.0",
  "info": {
    "description": "Cigsmoke API Docs",
    "version": "1.0.0",
    "title": "Cigsmoke"
  },
  "basePath": "/",
  "paths": {
    "/auth/signup": {
      "post": {
        "tags": [
          "auth"
        ],
        "summary": "Signup like a new user",
        "description": "",
        "operationId": "signup",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "firstName",
                "lastName",
                "email",
                "password"
              ],
              "properties": {
                "firstName": {
                  "type": "string"
                },
                "lastName": {
                  "type": "string"
                },
                "email": {
                  "type": "string"
                },
                "password": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Successful created",
            "schema": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Invalid User request"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/auth/signin": {
      "post": {
        "tags": [
          "auth"
        ],
        "summary": "Login with email",
        "description": "",
        "operationId": "signin",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "email",
                "password"
              ],
              "properties": {
                "email": {
                  "type": "string"
                },
                "password": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Successful created",
            "schema": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Invalid User request"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/auth/token": {
      "post": {
        "tags": [
          "auth"
        ],
        "summary": "Create token",
        "description": "",
        "operationId": "CreateToken",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "token"
              ],
              "properties": {
                "token": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Successful created",
            "schema": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Invalid User request"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/auth/reset": {
      "post": {
        "tags": [
          "auth"
        ],
        "summary": "Reset password by email",
        "description": "",
        "operationId": "ResetPwd",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "email"
              ],
              "properties": {
                "email": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Successful created",
            "schema": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Invalid User request"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/auth/update-password": {
      "put": {
        "tags": [
          "auth"
        ],
        "summary": "Update password",
        "description": "",
        "operationId": "UpdatePwd",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "token",
                "password"
              ],
              "properties": {
                "token": {
                  "type": "string",
                  "description": "token that has send to email"
                },
                "password": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Successful created",
            "schema": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Invalid User request"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/auth/authorize/:token": {
      "get": {
        "tags": [
          "auth"
        ],
        "summary": "Authorize by email ",
        "description": "",
        "operationId": "Auth",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "token"
              ],
              "properties": {
                "token": {
                  "type": "string",
                  "description": "token that has send to email"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Successful created",
            "schema": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Invalid User request"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/users": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Get array of users",
        "description": "",
        "operationId": "getUsers",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "type": "string",
            "name": "authorization",
            "required": true,
            "in": "header",
            "description": "admin token"
          },
          {
            "name": "firstName",
            "in": "query",
            "description": "Filtering tags by firstName",
            "required": false,
            "type": "string"
          },
          {
            "name": "lastName",
            "in": "query",
            "description": "Filtering tags by lastName",
            "required": false,
            "type": "string"
          },
          {
            "name": "email",
            "in": "query",
            "description": "Filtering tags by email",
            "required": false,
            "type": "string"
          },
          {
            "name": "isVerified",
            "in": "query",
            "description": "Filtering tags by isVerified",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "role",
            "in": "query",
            "description": "Filtering tags by role",
            "required": false,
            "type": "string",
            "enum": [
              "Admin",
              "User"
            ]
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "Sorting tags by property",
            "default": "firstName",
            "required": false,
            "type": "string"
          },
          {
            "name": "orderBy",
            "in": "query",
            "description": "Ordering results. ASC | DESC",
            "default": "DESC",
            "required": false,
            "type": "string"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Limiting tags in array",
            "default": 10,
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      },
      "post": {
        "tags": [
          "user"
        ],
        "summary": "Create a user",
        "description": "",
        "operationId": "createUser",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "type": "string",
            "name": "authorization",
            "required": true,
            "in": "header",
            "description": "admin token"
          },
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserDTO"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Successful created",
            "schema": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Invalid User request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    },
    "/users/{userId}": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Find user by id",
        "operationId": "findUserById",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "type": "string",
            "name": "authorization",
            "required": true,
            "in": "header",
            "description": "admin token or user-token from user owner"
          },
          {
            "name": "userId",
            "in": "path",
            "description": "id of user to return",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "400": {
            "description": "Invalid id supplied"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "User not found"
          }
        }
      },
      "put": {
        "tags": [
          "user"
        ],
        "summary": "Update the user",
        "description": "",
        "operationId": "updateUser",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "type": "string",
            "name": "authorization",
            "required": true,
            "in": "header",
            "description": "admin token or user-token from user owner"
          },
          {
            "name": "userId",
            "in": "path",
            "description": "id of user to return",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful updated",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "400": {
            "description": "Invalid User request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "User not found"
          }
        }
      },
      "delete": {
        "tags": [
          "user"
        ],
        "summary": "Delete the user",
        "description": "",
        "operationId": "deleteUser",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "type": "string",
            "name": "authorization",
            "required": true,
            "in": "header",
            "description": "admin token"
          },
          {
            "name": "userId",
            "in": "path",
            "description": "id of user to return",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful deleted",
            "schema": {
              "type": "object",
              "properties": {
                "firstName": {
                  "type": "string"
                },
                "lastName": {
                  "type": "string"
                },
                "email": {
                  "type": "string"
                },
                "isVerified": {
                  "type": "boolean",
                  "default": false
                },
                "role": {
                  "enum": [
                    "User",
                    "Admins"
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "User not found"
          }
        }
      }
    },
    "/brands": {
      "get": {
        "tags": [
          "brand"
        ],
        "summary": "Get array of brands",
        "description": "",
        "operationId": "getBrands",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "type": "string",
            "in": "query",
            "name": "name",
            "required": false
          },
          {
            "type": "boolean",
            "in": "query",
            "name": "showOnMain",
            "required": false
          },
          {
            "type": "string",
            "in": "query",
            "name": "sortBy",
            "required": false,
            "default": "name"
          },
          {
            "type": "string",
            "in": "query",
            "name": "orderBy",
            "required": false,
            "default": "DESC",
            "description": "can be ASC or DESC"
          },
          {
            "type": "string",
            "in": "query",
            "name": "offset",
            "required": false,
            "default": 0,
            "description": "qty rows to skip for pagination"
          },
          {
            "type": "string",
            "in": "query",
            "name": "limit",
            "required": false,
            "default": 10,
            "description": "qty rows to take for pagination"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/BrandResponse"
            }
          }
        }
      },
      "post": {
        "tags": [
          "brand"
        ],
        "summary": "Create a brand",
        "description": "",
        "operationId": "createBrand",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "type": "string",
            "name": "authorization",
            "required": true,
            "in": "header",
            "description": "admin token"
          },
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Brand"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successful created",
            "schema": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Invalid Brand request"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/brands/{brandId}": {
      "get": {
        "tags": [
          "brand"
        ],
        "summary": "Find brand by id",
        "operationId": "findBrandById",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "brandId",
            "in": "path",
            "description": "ID of brand to return",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Brand"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Brand not found"
          }
        }
      },
      "put": {
        "tags": [
          "brand"
        ],
        "summary": "Update the brand",
        "description": "",
        "operationId": "updateBrand",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "type": "string",
            "name": "authorization",
            "required": true,
            "in": "header",
            "description": "admin token"
          },
          {
            "name": "brandId",
            "in": "path",
            "description": "ID of brand to return",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Brand"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful updated",
            "schema": {
              "$ref": "#/definitions/Brand"
            }
          },
          "400": {
            "description": "Invalid Brand request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Brand not found"
          }
        }
      },
      "delete": {
        "tags": [
          "brand"
        ],
        "summary": "Delete the brand",
        "description": "",
        "operationId": "deleteBrand",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "type": "string",
            "name": "authorization",
            "required": true,
            "in": "header",
            "description": "admin token"
          },
          {
            "name": "brandId",
            "in": "path",
            "description": "ID of brand to return",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful deleted",
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string"
                },
                "url": {
                  "type": "string"
                },
                "image": {
                  "type": "string"
                },
                "showOnMain": {
                  "type": "boolean",
                  "default": false,
                  "description": "value true can be post only with admin token"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Brand not found"
          }
        }
      }
    },
    "/brands/getBrandsByCategory/{categoryUrl}": {
      "get": {
        "tags": [
          "brand"
        ],
        "summary": "Get array of brands by category url",
        "description": "",
        "operationId": "getBrandsByCategoryUrl",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "categoryUrl",
            "in": "path",
            "description": "URL of category",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Brand"
              }
            }
          },
          "404": {
            "description": "Category not found"
          }
        }
      }
    },
    "/categories": {
      "get": {
        "tags": [
          "category"
        ],
        "summary": "Get array of categories",
        "description": "",
        "operationId": "getCategories",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "type": "string",
            "in": "query",
            "name": "name",
            "required": false
          },
          {
            "type": "string",
            "in": "query",
            "name": "url",
            "required": false
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "in": "query",
            "name": "parameters",
            "required": false
          },
          {
            "type": "string",
            "in": "query",
            "name": "parent",
            "required": false
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "in": "query",
            "name": "children",
            "required": false
          },
          {
            "type": "string",
            "in": "query",
            "name": "sortBy",
            "required": false,
            "default": "name"
          },
          {
            "type": "string",
            "in": "query",
            "name": "orderBy",
            "required": false,
            "default": "DESC",
            "description": "can be ASC or DESC"
          },
          {
            "type": "string",
            "in": "query",
            "name": "offset",
            "required": false,
            "default": 0,
            "description": "qty rows to skip for pagination"
          },
          {
            "type": "string",
            "in": "query",
            "name": "limit",
            "required": false,
            "default": 10,
            "description": "qty rows to take for pagination"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/CategoryResponse"
            }
          }
        }
      },
      "post": {
        "tags": [
          "category"
        ],
        "summary": "Create a category",
        "description": "",
        "operationId": "createCategory",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "type": "string",
            "name": "authorization",
            "required": true,
            "in": "header",
            "description": "admin-token"
          },
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CategoryDTO"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successful created",
            "schema": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Invalid Category request"
          },
          "403": {
            "description": "Forbidden"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/categories/{categoryId}": {
      "get": {
        "tags": [
          "category"
        ],
        "summary": "Find category by id",
        "operationId": "findCategoryById",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "categoryId",
            "in": "path",
            "description": "ID of category to return",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Category"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Category not found"
          }
        }
      },
      "put": {
        "tags": [
          "category"
        ],
        "summary": "Update the category",
        "description": "",
        "operationId": "updateCategory",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "type": "string",
            "name": "authorization",
            "required": true,
            "in": "header",
            "description": "admin-token"
          },
          {
            "name": "categoryId",
            "in": "path",
            "description": "ID of category to return",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CategoryDTO"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful updated",
            "schema": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string"
                },
                "name": {
                  "type": "string"
                },
                "image": {
                  "type": "string"
                },
                "createdAt": {
                  "type": "string",
                  "readOnly": true
                },
                "updatedAt": {
                  "type": "string",
                  "readOnly": true
                },
                "parameters": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "$ref": "#/definitions/Parameter"
                  }
                },
                "url": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Invalid Category request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Category not found"
          }
        }
      },
      "delete": {
        "tags": [
          "category"
        ],
        "summary": "Delete the category",
        "description": "",
        "operationId": "deleteCategory",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "type": "string",
            "name": "authorization",
            "required": true,
            "in": "header",
            "description": "admin-token"
          },
          {
            "name": "categoryId",
            "in": "path",
            "description": "ID of category to return",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful deleted",
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string"
                },
                "image": {
                  "type": "string"
                },
                "createdAt": {
                  "type": "string",
                  "readOnly": true
                },
                "updatedAt": {
                  "type": "string",
                  "readOnly": true
                },
                "url": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Category not found"
          }
        }
      }
    },
    "/categories/categoriesTree": {
      "get": {
        "tags": [
          "category"
        ],
        "summary": "Get array of categories with parents and children trees",
        "description": "",
        "operationId": "getCategoriesTree",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CategoryInTree"
              }
            }
          },
          "404": {
            "description": "Category not found"
          }
        }
      }
    },
    "/colors": {
      "get": {
        "tags": [
          "color"
        ],
        "summary": "Get array of colors",
        "description": "",
        "operationId": "getColors",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "type": "string",
            "in": "query",
            "name": "name",
            "required": false
          },
          {
            "type": "string",
            "in": "query",
            "name": "url",
            "required": false
          },
          {
            "type": "string",
            "in": "query",
            "name": "code",
            "required": false
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "in": "query",
            "name": "products",
            "required": false
          },
          {
            "type": "string",
            "in": "query",
            "name": "sortBy",
            "required": false,
            "default": "name"
          },
          {
            "type": "string",
            "in": "query",
            "name": "orderBy",
            "required": false,
            "default": "DESC",
            "description": "can be ASC or DESC"
          },
          {
            "type": "string",
            "in": "query",
            "name": "offset",
            "required": false,
            "default": 0,
            "description": "qty rows to skip for pagination"
          },
          {
            "type": "string",
            "in": "query",
            "name": "limit",
            "required": false,
            "default": 10,
            "description": "qty rows to take for pagination"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ColorResponse"
            }
          }
        }
      },
      "post": {
        "tags": [
          "color"
        ],
        "summary": "Create a color",
        "description": "",
        "operationId": "createColor",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Color"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successful created",
            "schema": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Invalid Color request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    },
    "/colors/{colorId}": {
      "get": {
        "tags": [
          "color"
        ],
        "summary": "Find color by id",
        "operationId": "findColorById",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "colorId",
            "in": "path",
            "description": "ID of color to return",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Color"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Color not found"
          }
        }
      },
      "put": {
        "tags": [
          "color"
        ],
        "summary": "Update the color",
        "description": "",
        "operationId": "updateColor",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "colorId",
            "in": "path",
            "description": "ID of color to return",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Color"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful updated",
            "schema": {
              "$ref": "#/definitions/ColorWithoutJoins"
            }
          },
          "400": {
            "description": "Invalid Color request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Color not found"
          }
        }
      },
      "delete": {
        "tags": [
          "color"
        ],
        "summary": "Delete the color",
        "description": "",
        "operationId": "deleteColor",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "colorId",
            "in": "path",
            "description": "ID of color to return",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful deleted",
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string"
                },
                "url": {
                  "type": "string"
                },
                "code": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Color not found"
          }
        }
      }
    },
    "/products": {
      "get": {
        "tags": [
          "product"
        ],
        "summary": "Get array of products",
        "description": "",
        "operationId": "getProducts",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "description": "Filtering products by name",
            "required": false,
            "type": "string"
          },
          {
            "name": "minPrice",
            "in": "query",
            "description": "Filtering products by price greater then minPrice",
            "required": false,
            "type": "integer"
          },
          {
            "name": "maxPrice",
            "in": "query",
            "description": "Filtering products by price less then maxPrice",
            "required": false,
            "type": "integer"
          },
          {
            "name": "desc",
            "in": "query",
            "description": "Filtering products by desc",
            "required": false,
            "type": "string"
          },
          {
            "name": "available",
            "in": "query",
            "description": "Filtering products by available",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "colors",
            "in": "query",
            "description": "Filtering products by colors URLs in array",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          {
            "name": "categories",
            "in": "query",
            "description": "Filtering products by categories URLs in array",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          {
            "name": "brands",
            "in": "query",
            "description": "Filtering products by brands names in array",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          {
            "name": "tags",
            "in": "query",
            "description": "Filtering products by tags URLs in array",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          {
            "name": "parent",
            "in": "query",
            "description": "Filtering products by parent url",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortBy",
            "in": "query",
            "default": "name",
            "required": false,
            "type": "string"
          },
          {
            "name": "orderBy",
            "in": "query",
            "description": "Ordering results. ASC | DESC",
            "default": "DESC",
            "required": false,
            "type": "string"
          },
          {
            "type": "string",
            "in": "query",
            "name": "offset",
            "required": false,
            "default": 0,
            "description": "qty rows to skip for pagination"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "qty rows to take for pagination",
            "default": 10,
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ProductResponse"
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "product"
        ],
        "summary": "Create a product",
        "description": "",
        "operationId": "createProduct",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "type": "string",
            "name": "authorization",
            "required": true,
            "in": "header",
            "description": "admin-token"
          },
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ProductDTO"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successful created",
            "schema": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Invalid Product request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    },
    "/products/{productId}": {
      "get": {
        "tags": [
          "product"
        ],
        "summary": "Find product by id",
        "operationId": "findProductById",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "productId",
            "in": "path",
            "description": "ID of product to return",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Product"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Product not found"
          }
        }
      },
      "put": {
        "tags": [
          "product"
        ],
        "summary": "Update the product",
        "description": "",
        "operationId": "updateProduct",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "type": "string",
            "name": "authorization",
            "required": true,
            "in": "header",
            "description": "admin-token"
          },
          {
            "name": "productId",
            "in": "path",
            "description": "ID of product to return",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ProductDTO"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful updated",
            "schema": {
              "$ref": "#/definitions/ProductWithoutJoins"
            }
          },
          "400": {
            "description": "Invalid Product request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Product not found"
          }
        }
      },
      "delete": {
        "tags": [
          "product"
        ],
        "summary": "Delete the product",
        "description": "",
        "operationId": "deleteProduct",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "type": "string",
            "name": "authorization",
            "required": true,
            "in": "header",
            "description": "admin-token"
          },
          {
            "name": "productId",
            "in": "path",
            "description": "ID of product to return",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful deleted",
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string"
                },
                "price": {
                  "type": "integer",
                  "minimum": 1
                },
                "oldPrice": {
                  "type": "integer"
                },
                "desc": {
                  "type": "string"
                },
                "available": {
                  "type": "boolean"
                },
                "createdAt": {
                  "type": "string",
                  "readOnly": true
                },
                "updatedAt": {
                  "type": "string",
                  "readOnly": true
                },
                "images": {
                  "type": "string"
                },
                "url": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Product not found"
          }
        }
      }
    },
    "/products/by-url/{url}": {
      "get": {
        "tags": [
          "product"
        ],
        "summary": "Find product by url",
        "operationId": "findProductByUrl",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "url",
            "in": "path",
            "description": "URL of product to return",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Product"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Product not found"
          }
        }
      }
    },
    "/products/productsUnderOneThousand": {
      "get": {
        "tags": [
          "product"
        ],
        "summary": "Get array of products which price is under 1000",
        "description": "",
        "operationId": "getProducts",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ProductResponse"
              }
            }
          }
        }
      }
    },
    "/products/priceRange": {
      "get": {
        "tags": [
          "product"
        ],
        "summary": "Get min and max product prices by category and name",
        "description": "",
        "operationId": "getPriceRange",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "description": "Filtering products by name",
            "required": false,
            "type": "string"
          },
          {
            "name": "parent",
            "in": "query",
            "description": "Filtering products by parent URL",
            "required": false,
            "type": "string"
          },
          {
            "name": "categories",
            "in": "query",
            "description": "Filtering products by categories URLs in array",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/PriceRange"
            }
          }
        }
      }
    },
    "/tags": {
      "get": {
        "tags": [
          "tag"
        ],
        "summary": "Get array of tags",
        "description": "",
        "operationId": "getTags",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "type": "string",
            "in": "query",
            "name": "name",
            "required": false
          },
          {
            "type": "string",
            "in": "query",
            "name": "url",
            "required": false
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "in": "query",
            "name": "products",
            "required": false
          },
          {
            "type": "string",
            "in": "query",
            "name": "sortBy",
            "required": false,
            "default": "name"
          },
          {
            "type": "string",
            "in": "query",
            "name": "orderBy",
            "required": false,
            "default": "DESC",
            "description": "can be ASC or DESC"
          },
          {
            "type": "string",
            "in": "query",
            "name": "offset",
            "required": false,
            "default": 0,
            "description": "qty rows to skip for pagination"
          },
          {
            "type": "string",
            "in": "query",
            "name": "limit",
            "required": false,
            "default": 10,
            "description": "qty rows to take for pagination"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TagResponse"
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "tag"
        ],
        "summary": "Create a tag",
        "description": "",
        "operationId": "createTag",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "type": "string",
            "name": "authorization",
            "required": true,
            "in": "header",
            "description": "admin-token"
          },
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Tag"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successful created",
            "schema": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Invalid Tag request"
          },
          "403": {
            "description": "Forbidden"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/tags/{tagId}": {
      "get": {
        "tags": [
          "tag"
        ],
        "summary": "Find tag by id",
        "operationId": "findTagById",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "tagId",
            "in": "path",
            "description": "ID of tag to return",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Tag"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Tag not found"
          }
        }
      },
      "put": {
        "tags": [
          "tag"
        ],
        "summary": "Update the tag",
        "description": "",
        "operationId": "updateTag",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "type": "string",
            "name": "authorization",
            "required": true,
            "in": "header",
            "description": "admin-token"
          },
          {
            "name": "tagId",
            "in": "path",
            "description": "ID of tag to return",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Tag"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful updated",
            "schema": {
              "$ref": "#/definitions/TagWithoutJoins"
            }
          },
          "400": {
            "description": "Invalid Tag request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Tag not found"
          }
        }
      },
      "delete": {
        "tags": [
          "tag"
        ],
        "summary": "Delete the tag",
        "description": "",
        "operationId": "deleteTag",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "type": "string",
            "name": "authorization",
            "required": true,
            "in": "header",
            "description": "admin-token"
          },
          {
            "name": "tagId",
            "in": "path",
            "description": "ID of tag to return",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful deleted",
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string"
                },
                "url": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Tag not found"
          }
        }
      }
    },
    "/images/{fileName}": {
      "get": {
        "tags": [
          "image"
        ],
        "summary": "Find image by filename",
        "operationId": "findImageByFileName",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "image/png"
        ],
        "parameters": [
          {
            "name": "fileName",
            "in": "path",
            "description": "Filename of image to return",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Image not found"
          }
        }
      }
    },
    "/images": {
      "post": {
        "tags": [
          "image"
        ],
        "summary": "Create an image",
        "description": "Return array of filenames images which uploaded",
        "operationId": "createImage",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "required": [
                "files"
              ],
              "type": "object",
              "properties": {
                "files": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "description": "array of images to upload"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successful created",
            "schema": {
              "type": "object",
              "properties": {
                "": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid Image request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    },
    "/addresses": {
      "get": {
        "tags": [
          "address"
        ],
        "summary": "Get array of addresses",
        "description": "",
        "operationId": "getAddresses",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "type": "string",
            "name": "authorization",
            "required": true,
            "in": "header",
            "description": "admin-token or user-token"
          },
          {
            "name": "userId",
            "in": "query",
            "description": "Filtering addresses by userId",
            "required": false,
            "type": "string"
          },
          {
            "name": "firstName",
            "in": "query",
            "description": "Filtering addresses by firstName",
            "required": false,
            "type": "string"
          },
          {
            "name": "lastName",
            "in": "query",
            "description": "Filtering addresses by lastName",
            "required": false,
            "type": "string"
          },
          {
            "name": "address",
            "in": "query",
            "description": "Filtering addresses by address",
            "required": false,
            "type": "string"
          },
          {
            "name": "city",
            "in": "query",
            "description": "Filtering addresses by city",
            "required": false,
            "type": "string"
          },
          {
            "name": "country",
            "in": "query",
            "description": "Filtering addresses by country",
            "required": false,
            "type": "string"
          },
          {
            "name": "zipCode",
            "in": "query",
            "description": "Filtering addresses by zipCode",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "Sorting addresses by property",
            "default": "userId",
            "required": false,
            "type": "string"
          },
          {
            "name": "orderBy",
            "in": "query",
            "description": "Ordering results. ASC | DESC",
            "default": "DESC",
            "required": false,
            "type": "string"
          },
          {
            "type": "string",
            "in": "query",
            "name": "offset",
            "required": false,
            "default": 0,
            "description": "qty rows to skip for pagination"
          },
          {
            "type": "string",
            "in": "query",
            "name": "limit",
            "required": false,
            "default": 10,
            "description": "qty rows to take for pagination"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AddressResponse"
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "post": {
        "tags": [
          "address"
        ],
        "summary": "Create a address",
        "description": "",
        "operationId": "createAddress",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "type": "string",
            "name": "authorization",
            "required": true,
            "in": "header",
            "description": "admin-token or user-token"
          },
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AddressDTO"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successful created",
            "schema": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Invalid Address request"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/addresses/{addressId}": {
      "get": {
        "tags": [
          "address"
        ],
        "summary": "Find address by id",
        "operationId": "findAddressById",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "addressId",
            "in": "path",
            "description": "ID of address to return",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Address"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Address not found"
          }
        }
      },
      "put": {
        "tags": [
          "address"
        ],
        "summary": "Update the address",
        "description": "",
        "operationId": "updateAddress",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "type": "string",
            "name": "authorization",
            "required": true,
            "in": "header",
            "description": "admin-token or user-token"
          },
          {
            "name": "addressId",
            "in": "path",
            "description": "ID of address to return",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AddressDTO"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful updated",
            "schema": {
              "$ref": "#/definitions/AddressWithoutJoins"
            }
          },
          "400": {
            "description": "Invalid Address request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Address not found"
          }
        }
      },
      "delete": {
        "tags": [
          "address"
        ],
        "summary": "Delete the address",
        "description": "",
        "operationId": "deleteAddress",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "type": "string",
            "name": "authorization",
            "required": true,
            "in": "header",
            "description": "admin-token or user-token"
          },
          {
            "name": "addressId",
            "in": "path",
            "description": "ID of address to return",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful deleted",
            "schema": {
              "type": "object",
              "properties": {
                "userId": {
                  "type": "string"
                },
                "firstName": {
                  "type": "string"
                },
                "lastName": {
                  "type": "string"
                },
                "address": {
                  "type": "string"
                },
                "city": {
                  "type": "string"
                },
                "country": {
                  "type": "string"
                },
                "zipCode": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Address not found"
          }
        }
      }
    },
    "/baskets": {
      "get": {
        "tags": [
          "basket"
        ],
        "summary": "Get array of baskets",
        "description": "",
        "operationId": "getBaskets",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "userId",
            "in": "query",
            "description": "Filtering baskets by userId",
            "required": false,
            "type": "string"
          },
          {
            "name": "minTotalAmount",
            "in": "query",
            "description": "Filtering baskets by totalAmount greater then minTotalAmount",
            "required": false,
            "type": "integer"
          },
          {
            "name": "maxTotalAmount",
            "in": "query",
            "description": "Filtering baskets by totalAmount less then maxTotalAmount",
            "required": false,
            "type": "integer"
          },
          {
            "name": "status",
            "in": "query",
            "description": "Filtering baskets by status",
            "required": false,
            "type": "string"
          },
          {
            "name": "updatedFrom",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "updatedTo",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "Sorting baskets by property",
            "default": "userId",
            "required": false,
            "type": "string"
          },
          {
            "name": "orderBy",
            "in": "query",
            "description": "Ordering results. ASC | DESC",
            "default": "DESC",
            "required": false,
            "type": "string"
          },
          {
            "type": "string",
            "in": "query",
            "name": "offset",
            "required": false,
            "default": 0,
            "description": "qty rows to skip for pagination"
          },
          {
            "type": "string",
            "in": "query",
            "name": "limit",
            "required": false,
            "default": 10,
            "description": "qty rows to take for pagination"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/BasketResponse"
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "basket"
        ],
        "summary": "Create a basket",
        "description": "",
        "operationId": "createBasket",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/BasketDTO"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successful created",
            "schema": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Invalid Basket request"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/baskets/{basketId}": {
      "get": {
        "tags": [
          "basket"
        ],
        "summary": "Find basket by id",
        "operationId": "findBasketById",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "basketId",
            "in": "path",
            "description": "ID of basket to return",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Basket"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Basket not found"
          }
        }
      },
      "put": {
        "tags": [
          "basket"
        ],
        "summary": "Update the basket",
        "description": "",
        "operationId": "updateBasket",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "basketId",
            "in": "path",
            "description": "ID of basket to return",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/BasketDTO"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful updated",
            "schema": {
              "$ref": "#/definitions/BasketWithoutJoins"
            }
          },
          "400": {
            "description": "Invalid Basket request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Basket not found"
          }
        }
      },
      "delete": {
        "tags": [
          "basket"
        ],
        "summary": "Delete the basket",
        "description": "",
        "operationId": "deleteBasket",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "type": "string",
            "name": "authorization",
            "required": true,
            "in": "header",
            "description": "admin-token or user-token"
          },
          {
            "name": "basketId",
            "in": "path",
            "description": "ID of basket to return",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful deleted",
            "schema": {
              "type": "object",
              "properties": {
                "userId": {
                  "type": "string"
                },
                "createdAt": {
                  "type": "string",
                  "readOnly": true
                },
                "updatedAt": {
                  "type": "string",
                  "readOnly": true
                },
                "status": {
                  "type": "string",
                  "default": "New"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Basket not found"
          }
        }
      }
    },
    "/checkouts": {
      "get": {
        "tags": [
          "checkout"
        ],
        "summary": "Get array of checkouts",
        "description": "",
        "operationId": "getCheckouts",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "addressId",
            "in": "query",
            "description": "Filtering checkouts by addressId",
            "required": false,
            "type": "string"
          },
          {
            "name": "paymentId",
            "in": "query",
            "description": "Filtering checkouts by paymentId",
            "required": false,
            "type": "string"
          },
          {
            "name": "basketId",
            "in": "query",
            "description": "Filtering checkouts by basketId",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "Sorting checkouts by property",
            "default": "basket",
            "required": false,
            "type": "string"
          },
          {
            "name": "orderBy",
            "in": "query",
            "description": "Ordering results. ASC | DESC",
            "default": "DESC",
            "required": false,
            "type": "string"
          },
          {
            "type": "string",
            "in": "query",
            "name": "offset",
            "required": false,
            "default": 0,
            "description": "qty rows to skip for pagination"
          },
          {
            "type": "string",
            "in": "query",
            "name": "limit",
            "required": false,
            "default": 10,
            "description": "qty rows to take for pagination"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CheckoutResponse"
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "checkout"
        ],
        "summary": "Create a checkout",
        "description": "",
        "operationId": "createCheckout",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CheckoutDTO"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successful created",
            "schema": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Invalid Checkout request"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/checkouts/{checkoutId}": {
      "get": {
        "tags": [
          "checkout"
        ],
        "summary": "Find checkout by id",
        "operationId": "findCheckoutById",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "checkoutId",
            "in": "path",
            "description": "ID of checkout to return",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Checkout"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Checkout not found"
          }
        }
      },
      "put": {
        "tags": [
          "checkout"
        ],
        "summary": "Update the checkout",
        "description": "",
        "operationId": "updateCheckout",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "checkoutId",
            "in": "path",
            "description": "ID of checkout to return",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CheckoutDTO"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful updated",
            "schema": {
              "$ref": "#/definitions/CheckoutWithoutJoins"
            }
          },
          "400": {
            "description": "Invalid Checkout request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Checkout not found"
          }
        }
      },
      "delete": {
        "tags": [
          "checkout"
        ],
        "summary": "Delete the checkout",
        "description": "",
        "operationId": "deleteCheckout",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "checkoutId",
            "in": "path",
            "description": "ID of checkout to return",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful deleted",
            "schema": {
              "type": "object",
              "properties": {
                "userId": {
                  "type": "string"
                },
                "comment": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Checkout not found"
          }
        }
      }
    },
    "/orderProducts": {
      "get": {
        "tags": [
          "orderProduct"
        ],
        "summary": "Get array of orderProducts",
        "description": "",
        "operationId": "getOrderProducts",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "type": "string",
            "name": "authorization",
            "required": true,
            "in": "header",
            "description": "admin-token or user-token"
          },
          {
            "name": "productId",
            "in": "query",
            "description": "Filtering orderProducts by productId",
            "required": false,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "minQty",
            "in": "query",
            "description": "Filtering orderProducts by qty greater then minQty",
            "required": false,
            "type": "integer"
          },
          {
            "name": "maxQty",
            "in": "query",
            "description": "Filtering orderProducts by qty less then maxQty",
            "required": false,
            "type": "integer"
          },
          {
            "name": "minPrice",
            "in": "query",
            "description": "Filtering orderProducts by product price greater then minPrice",
            "required": false,
            "type": "integer"
          },
          {
            "name": "maxPrice",
            "in": "query",
            "description": "Filtering orderProducts by product price less then maxPrice",
            "required": false,
            "type": "integer"
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "Sorting orderProducts by property",
            "default": "productId",
            "required": false,
            "type": "string"
          },
          {
            "name": "orderBy",
            "in": "query",
            "description": "Ordering results. ASC | DESC",
            "default": "DESC",
            "required": false,
            "type": "string"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Limiting orderProducts in array",
            "default": 10,
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/OrderProductResponse"
              }
            }
          }
        }
      }
    },
    "/orderProducts/{orderProductId}": {
      "get": {
        "tags": [
          "orderProduct"
        ],
        "summary": "Find orderProduct by id",
        "operationId": "findOrderProductById",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "type": "string",
            "name": "authorization",
            "required": true,
            "in": "header",
            "description": "admin-token or user-token"
          },
          {
            "name": "orderProductId",
            "in": "path",
            "description": "ID of orderProduct to return",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/OrderProduct"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "OrderProduct not found"
          }
        }
      }
    },
    "/reviews": {
      "get": {
        "tags": [
          "review"
        ],
        "summary": "Get array of reviews",
        "description": "",
        "operationId": "getReviews",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "productId",
            "in": "query",
            "description": "Filtering reviews by productId",
            "required": false,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "query",
            "description": "Filtering reviews by userId",
            "required": false,
            "type": "string"
          },
          {
            "name": "showOnMain",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "merge",
            "in": "query",
            "required": false,
            "type": "string",
            "default": "true"
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "Sorting reviews by property",
            "default": "productId",
            "required": false,
            "type": "string"
          },
          {
            "name": "orderBy",
            "in": "query",
            "description": "Ordering results. ASC | DESC",
            "default": "DESC",
            "required": false,
            "type": "string"
          },
          {
            "type": "string",
            "in": "query",
            "name": "offset",
            "required": false,
            "default": 0,
            "description": "qty rows to skip for pagination"
          },
          {
            "type": "string",
            "in": "query",
            "name": "limit",
            "required": false,
            "default": 10,
            "description": "qty rows to take for pagination"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ReviewResponse"
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "review"
        ],
        "summary": "Create a review",
        "description": "",
        "operationId": "createReview",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "type": "string",
            "name": "authorization",
            "required": true,
            "in": "header",
            "description": "admin-token or user-token"
          },
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ReviewDTO"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successful created",
            "schema": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Invalid Review request"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/reviews/{reviewId}": {
      "get": {
        "tags": [
          "review"
        ],
        "summary": "Find review by id",
        "operationId": "findReviewById",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "type": "string",
            "name": "authorization",
            "required": true,
            "in": "header",
            "description": "admin-token or user-token"
          },
          {
            "name": "reviewId",
            "in": "path",
            "description": "ID of review to return",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Review"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Review not found"
          }
        }
      },
      "put": {
        "tags": [
          "review"
        ],
        "summary": "Update the review",
        "description": "",
        "operationId": "updateReview",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "type": "string",
            "name": "authorization",
            "required": true,
            "in": "header",
            "description": "admin-token or user-token"
          },
          {
            "name": "reviewId",
            "in": "path",
            "description": "ID of review to return",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ReviewDTO"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful updated",
            "schema": {
              "$ref": "#/definitions/ReviewWithoutJoins"
            }
          },
          "400": {
            "description": "Invalid Review request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Review not found"
          }
        }
      },
      "delete": {
        "tags": [
          "review"
        ],
        "summary": "Delete the review",
        "description": "",
        "operationId": "deleteReview",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "type": "string",
            "name": "authorization",
            "required": true,
            "in": "header",
            "description": "admin-token or user-token"
          },
          {
            "name": "reviewId",
            "in": "path",
            "description": "ID of review to return",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful deleted",
            "schema": {
              "type": "object",
              "properties": {
                "rating": {
                  "type": "integer",
                  "minimum": 1,
                  "maximum": 10
                },
                "comment": {
                  "type": "string"
                },
                "createdAt": {
                  "type": "string"
                },
                "updatedAt": {
                  "type": "string"
                },
                "showOnMain": {
                  "type": "boolean",
                  "default": false
                },
                "productId": {
                  "type": "string"
                },
                "userId": {
                  "type": "string"
                },
                "comments": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Comment"
                  }
                },
                "reactions": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/ReviewReaction"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Review not found"
          }
        }
      }
    },
    "/wishlists": {
      "get": {
        "tags": [
          "wishlist"
        ],
        "summary": "Get array of wishlists",
        "description": "",
        "operationId": "getWishlists",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "sortBy",
            "in": "query",
            "description": "Sorting wishlists by property",
            "default": "productId",
            "required": false,
            "type": "string"
          },
          {
            "name": "orderBy",
            "in": "query",
            "description": "Ordering results. ASC | DESC",
            "default": "DESC",
            "required": false,
            "type": "string"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Limiting wishlists in array",
            "default": 10,
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Wishlist"
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "wishlist"
        ],
        "summary": "Create a wishlist",
        "description": "",
        "operationId": "createWishlist",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": false
          }
        ],
        "responses": {
          "201": {
            "description": "successful created",
            "schema": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Invalid Wishlist request"
          }
        }
      }
    },
    "/wishlists/{wishlistId}": {
      "get": {
        "tags": [
          "wishlist"
        ],
        "summary": "Find wishlist by id",
        "operationId": "findWishlistById",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "wishlistId",
            "in": "path",
            "description": "ID of wishlist to return",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Wishlist"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Wishlist not found"
          }
        }
      },
      "put": {
        "tags": [
          "wishlist"
        ],
        "summary": "Update the wishlist",
        "description": "",
        "operationId": "updateWishlist",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "wishlistId",
            "in": "path",
            "description": "ID of wishlist to return",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Wishlist"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful updated",
            "schema": {
              "type": "object",
              "properties": {
                "raw": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "description": ""
                },
                "affected": {
                  "type": "integer",
                  "description": "qty of updated raws"
                }
              }
            }
          },
          "400": {
            "description": "Invalid Wishlist request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Wishlist not found"
          }
        }
      },
      "delete": {
        "tags": [
          "wishlist"
        ],
        "summary": "Delete the wishlist",
        "description": "",
        "operationId": "deleteWishlist",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "wishlistId",
            "in": "path",
            "description": "ID of wishlist to return",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful deleted",
            "schema": {
              "type": "object",
              "properties": {
                "raw": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "description": ""
                },
                "affected": {
                  "type": "integer",
                  "description": "qty of deleted raws"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Wishlist not found"
          }
        }
      }
    },
    "/slides": {
      "get": {
        "tags": [
          "slide"
        ],
        "summary": "Get array of slides",
        "description": "",
        "operationId": "getSlides",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Slide"
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "slide"
        ],
        "summary": "Create a slide",
        "description": "",
        "operationId": "createSlide",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "type": "string",
            "name": "authorization",
            "required": true,
            "in": "header",
            "description": "admin token"
          },
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Slide"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Successful created",
            "schema": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Invalid Slide request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    },
    "/slides/{slideId}": {
      "get": {
        "tags": [
          "slide"
        ],
        "summary": "Find slide by id",
        "operationId": "findSlideById",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "slideId",
            "in": "path",
            "description": "id of slide to return",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/Slide"
            }
          },
          "400": {
            "description": "Invalid id supplied"
          },
          "404": {
            "description": "Slide not found"
          }
        }
      },
      "delete": {
        "tags": [
          "slide"
        ],
        "summary": "Delete the slide",
        "description": "",
        "operationId": "deleteSlide",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "type": "string",
            "name": "authorization",
            "required": true,
            "in": "header",
            "description": "admin token"
          },
          {
            "name": "slideId",
            "in": "path",
            "description": "id of slide to return",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful deleted",
            "schema": {
              "$ref": "#/definitions/Slide"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Slide not found"
          }
        }
      }
    },
    "/advertisements": {
      "get": {
        "tags": [
          "advertisement"
        ],
        "summary": "Get array of advertisements",
        "description": "",
        "operationId": "getAdvertisements",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Advertisement"
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "advertisement"
        ],
        "summary": "Create a advertisement",
        "description": "",
        "operationId": "createAdvertisement",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "type": "string",
            "name": "authorization",
            "required": true,
            "in": "header",
            "description": "admin token"
          },
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Advertisement"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Successful created",
            "schema": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Invalid Advertisement request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    },
    "/advertisements/{advertisementId}": {
      "get": {
        "tags": [
          "advertisement"
        ],
        "summary": "Find advertisement by id",
        "operationId": "findAdvertisementById",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "advertisementId",
            "in": "path",
            "description": "id of advertisement to return",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/Advertisement"
            }
          },
          "400": {
            "description": "Invalid id supplied"
          },
          "404": {
            "description": "Advertisement not found"
          }
        }
      },
      "put": {
        "tags": [
          "advertisement"
        ],
        "summary": "Update the advertisement",
        "description": "",
        "operationId": "updateAdvertisement",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "type": "string",
            "name": "authorization",
            "required": true,
            "in": "header",
            "description": "admin token"
          },
          {
            "name": "advertisementId",
            "in": "path",
            "description": "id of advertisement to return",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Advertisement"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful updated",
            "schema": {
              "$ref": "#/definitions/Advertisement"
            }
          },
          "400": {
            "description": "Invalid Advertisement request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Advertisement not found"
          }
        }
      },
      "delete": {
        "tags": [
          "advertisement"
        ],
        "summary": "Delete the advertisement",
        "description": "",
        "operationId": "deleteAdvertisement",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "type": "string",
            "name": "authorization",
            "required": true,
            "in": "header",
            "description": "admin token"
          },
          {
            "name": "advertisementId",
            "in": "path",
            "description": "id of advertisement to return",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful deleted",
            "schema": {
              "$ref": "#/definitions/Advertisement"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Advertisement not found"
          }
        }
      }
    },
    "/analytics": {
      "get": {
        "tags": [
          "analytics"
        ],
        "summary": "Get analytics object",
        "description": "",
        "operationId": "getAnalytics",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "type": "string",
            "name": "authorization",
            "required": true,
            "in": "header",
            "description": "admin token"
          },
          {
            "name": "updatedFrom",
            "in": "query",
            "description": "filtering sales from date",
            "required": false,
            "type": "string"
          },
          {
            "name": "updatedTo",
            "in": "query",
            "description": "filtering sales to date",
            "required": false,
            "type": "string"
          },
          {
            "name": "status",
            "in": "query",
            "description": "filtering sales by basket status",
            "required": false,
            "type": "string"
          },
          {
            "name": "groupBy",
            "in": "query",
            "description": "group sales by user/category/brand/product",
            "required": false,
            "default": "product",
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "description": "product or user or brand or category object with properties: qty and amount"
                    }
                  },
                  "totalAmount": {
                    "type": "number"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    },
    "/analytics/dynamic": {
      "get": {
        "tags": [
          "analytics"
        ],
        "summary": "Get sales dynamic from period",
        "description": "",
        "operationId": "getDynamic",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "type": "string",
            "name": "authorization",
            "required": true,
            "in": "header",
            "description": "admin token"
          },
          {
            "name": "from",
            "in": "query",
            "description": "filtering sales from date",
            "required": true,
            "type": "string"
          },
          {
            "name": "to",
            "in": "query",
            "description": "filtering sales to date",
            "required": true,
            "type": "string"
          },
          {
            "name": "step",
            "in": "query",
            "description": "step for dynamics (day or month)",
            "required": false,
            "default": "day",
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "date": {
                    "type": "string"
                  },
                  "amount": {
                    "type": "number"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid query params"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    }
  },
  "securityDefinitions": {
    "petstore_auth": {
      "type": "oauth2",
      "authorizationUrl": "http://petstore.swagger.io/api/oauth/dialog",
      "flow": "implicit",
      "scopes": {
        "write:pets": "modify pets in your account",
        "read:pets": "read your pets"
      }
    },
    "api_key": {
      "type": "apiKey",
      "name": "api_key",
      "in": "header"
    }
  },
  "definitions": {
    "Brand": {
      "required": [
        "name",
        "url"
      ],
      "properties": {
        "id": {
          "type": "string",
          "readOnly": true
        },
        "name": {
          "type": "string"
        },
        "url": {
          "type": "string"
        },
        "image": {
          "type": "string"
        },
        "showOnMain": {
          "type": "boolean",
          "default": false,
          "description": "value true can be post only with admin token"
        }
      },
      "xml": {
        "name": "Brand"
      }
    },
    "BrandResponse": {
      "properties": {
        "rows": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Brand"
          }
        },
        "length": {
          "type": "number"
        }
      }
    },
    "Category": {
      "properties": {
        "id": {
          "type": "string",
          "readOnly": true
        },
        "name": {
          "type": "string"
        },
        "image": {
          "type": "string"
        },
        "createdAt": {
          "type": "string",
          "readOnly": true
        },
        "updatedAt": {
          "type": "string",
          "readOnly": true
        },
        "parent": {
          "type": "object",
          "$ref": "#/definitions/Category"
        },
        "children": {
          "type": "object",
          "$ref": "#/definitions/Category"
        },
        "parameters": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/Parameter"
          }
        },
        "url": {
          "type": "string"
        }
      }
    },
    "CategoryWithoutJoins": {
      "properties": {
        "id": {
          "type": "string",
          "readOnly": true
        },
        "name": {
          "type": "string"
        },
        "image": {
          "type": "string"
        },
        "createdAt": {
          "type": "string",
          "readOnly": true
        },
        "updatedAt": {
          "type": "string",
          "readOnly": true
        },
        "url": {
          "type": "string"
        }
      }
    },
    "CategoryInTree": {
      "properties": {
        "id": {
          "type": "string",
          "readOnly": true
        },
        "name": {
          "type": "string"
        },
        "image": {
          "type": "string"
        },
        "createdAt": {
          "type": "string",
          "readOnly": true
        },
        "updatedAt": {
          "type": "string",
          "readOnly": true
        },
        "children": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/CategoryInTree"
          }
        },
        "url": {
          "type": "string"
        }
      }
    },
    "CategoryResponse": {
      "properties": {
        "rows": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Category"
          }
        },
        "length": {
          "type": "number"
        }
      }
    },
    "CategoryDTO": {
      "required": [
        "name",
        "parameters",
        "url"
      ],
      "properties": {
        "name": {
          "type": "string"
        },
        "image": {
          "type": "string"
        },
        "parentId": {
          "type": "string",
          "description": "parent category ID"
        },
        "children": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "array of children categories IDs"
        },
        "parameters": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/Parameter"
          }
        },
        "url": {
          "type": "string"
        }
      }
    },
    "Color": {
      "required": [
        "name",
        "url",
        "code"
      ],
      "properties": {
        "id": {
          "type": "string",
          "readOnly": true
        },
        "name": {
          "type": "string"
        },
        "products": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/ProductWithoutJoins"
          },
          "readOnly": true
        },
        "url": {
          "type": "string"
        },
        "code": {
          "type": "string"
        }
      }
    },
    "ColorWithoutJoins": {
      "required": [
        "name",
        "url",
        "code"
      ],
      "properties": {
        "id": {
          "type": "string",
          "readOnly": true
        },
        "name": {
          "type": "string"
        },
        "url": {
          "type": "string"
        },
        "code": {
          "type": "string"
        }
      }
    },
    "ColorResponse": {
      "properties": {
        "rows": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Color"
          }
        },
        "length": {
          "type": "number"
        }
      }
    },
    "Parameter": {
      "required": [
        "name"
      ],
      "properties": {
        "id": {
          "type": "string",
          "readOnly": true
        },
        "name": {
          "type": "string"
        }
      }
    },
    "Rating": {
      "properties": {
        "1": {
          "type": "number"
        },
        "2": {
          "type": "number"
        },
        "3": {
          "type": "number"
        },
        "4": {
          "type": "number"
        },
        "5": {
          "type": "number"
        },
        "avg": {
          "type": "number"
        }
      }
    },
    "ParameterProduct": {
      "properties": {
        "productId": {
          "type": "string"
        },
        "parameterId": {
          "type": "string"
        },
        "value": {
          "type": "string"
        },
        "parameter": {
          "$ref": "#/definitions/Parameter"
        }
      }
    },
    "Product": {
      "properties": {
        "id": {
          "type": "string",
          "readOnly": true
        },
        "name": {
          "type": "string"
        },
        "price": {
          "type": "integer",
          "minimum": 1
        },
        "oldPrice": {
          "type": "integer",
          "minimum": 1
        },
        "desc": {
          "type": "string"
        },
        "available": {
          "type": "boolean"
        },
        "createdAt": {
          "type": "string",
          "readOnly": true
        },
        "updatedAt": {
          "type": "string",
          "readOnly": true
        },
        "images": {
          "type": "string"
        },
        "colors": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/ColorWithoutJoins"
          }
        },
        "category": {
          "type": "object",
          "$ref": "#/definitions/Category"
        },
        "brand": {
          "type": "object",
          "$ref": "#/definitions/Brand"
        },
        "tags": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/TagWithoutJoins"
          }
        },
        "url": {
          "type": "string"
        },
        "rating": {
          "$ref": "#/definitions/Rating"
        },
        "reviews": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ReviewWithoutJoins"
          }
        },
        "parameterProduct": {
          "$ref": "#/definitions/ParameterProduct"
        }
      }
    },
    "ProductResponse": {
      "properties": {
        "rows": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Product"
          }
        },
        "length": {
          "type": "number"
        }
      }
    },
    "ProductWithoutJoins": {
      "properties": {
        "id": {
          "type": "string",
          "readOnly": true
        },
        "name": {
          "type": "string"
        },
        "price": {
          "type": "integer",
          "minimum": 1
        },
        "oldPrice": {
          "type": "integer"
        },
        "desc": {
          "type": "string"
        },
        "available": {
          "type": "boolean"
        },
        "createdAt": {
          "type": "string",
          "readOnly": true
        },
        "updatedAt": {
          "type": "string",
          "readOnly": true
        },
        "images": {
          "type": "string"
        },
        "url": {
          "type": "string"
        }
      }
    },
    "ProductDTO": {
      "required": [
        "name",
        "price",
        "available",
        "colors",
        "category",
        "brand",
        "url"
      ],
      "properties": {
        "id": {
          "type": "string",
          "readOnly": true
        },
        "name": {
          "type": "string"
        },
        "price": {
          "type": "integer",
          "minimum": 1
        },
        "oldPrice": {
          "type": "integer"
        },
        "desc": {
          "type": "string"
        },
        "available": {
          "type": "boolean"
        },
        "createdAt": {
          "type": "string",
          "readOnly": true
        },
        "updatedAt": {
          "type": "string",
          "readOnly": true
        },
        "colors": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "array of colors IDs"
        },
        "tags": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "array of tags IDs"
        },
        "category": {
          "type": "string",
          "description": "Category ID"
        },
        "images": {
          "type": "string",
          "description": "Stringified array of images filenames"
        },
        "brand": {
          "type": "string",
          "description": "Brand ID"
        },
        "url": {
          "type": "string"
        },
        "parameterProduct": {
          "type": "object",
          "properties": {
            "parameterId": {
              "type": "number"
            },
            "value": {
              "type": "string"
            }
          }
        }
      }
    },
    "Tag": {
      "required": [
        "name",
        "url"
      ],
      "properties": {
        "id": {
          "type": "string",
          "readOnly": true
        },
        "name": {
          "type": "string"
        },
        "products": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/ProductWithoutJoins"
          },
          "readOnly": true
        },
        "url": {
          "type": "string"
        }
      }
    },
    "TagResponse": {
      "properties": {
        "rows": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Tag"
          }
        },
        "length": {
          "type": "number"
        }
      }
    },
    "TagWithoutJoins": {
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "url": {
          "type": "string"
        }
      }
    },
    "Image": {
      "properties": {
        "id": {
          "type": "string",
          "readOnly": true
        },
        "filename": {
          "type": "string"
        },
        "originalName": {
          "type": "string"
        },
        "mimeType": {
          "type": "string"
        },
        "size": {
          "type": "integer"
        }
      }
    },
    "Address": {
      "properties": {
        "id": {
          "type": "string",
          "readOnly": true
        },
        "user": {
          "$ref": "#/definitions/User"
        },
        "firstName": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "address": {
          "type": "string"
        },
        "city": {
          "type": "string"
        },
        "country": {
          "type": "string"
        },
        "zipCode": {
          "type": "string"
        },
        "checkouts": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/CheckoutWithoutJoins"
          }
        }
      }
    },
    "AddressWithoutJoins": {
      "properties": {
        "id": {
          "type": "string",
          "readOnly": true
        },
        "userId": {
          "type": "string"
        },
        "firstName": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "address": {
          "type": "string"
        },
        "city": {
          "type": "string"
        },
        "country": {
          "type": "string"
        },
        "zipCode": {
          "type": "string"
        }
      }
    },
    "AddressResponse": {
      "properties": {
        "rows": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Address"
          }
        },
        "length": {
          "type": "number"
        }
      }
    },
    "AddressDTO": {
      "required": [
        "firstName",
        "lastName",
        "address",
        "city",
        "country",
        "zipCode"
      ],
      "properties": {
        "id": {
          "type": "string",
          "readOnly": true
        },
        "firstName": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "address": {
          "type": "string"
        },
        "city": {
          "type": "string"
        },
        "country": {
          "type": "string"
        },
        "zipCode": {
          "type": "string"
        }
      }
    },
    "Basket": {
      "required": [
        "id",
        "orderProducts",
        "createdAt",
        "updatedAt"
      ],
      "properties": {
        "id": {
          "type": "string",
          "readOnly": true
        },
        "userId": {
          "type": "string"
        },
        "orderProducts": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/OrderProduct"
          }
        },
        "totalAmount": {
          "type": "number"
        },
        "checkout": {
          "type": "object",
          "$ref": "#/definitions/CheckoutWithoutJoins"
        },
        "createdAt": {
          "type": "string",
          "readOnly": true
        },
        "updatedAt": {
          "type": "string",
          "readOnly": true
        },
        "status": {
          "type": "string",
          "default": "New"
        }
      }
    },
    "BasketWithoutJoins": {
      "properties": {
        "id": {
          "type": "string",
          "readOnly": true
        },
        "userId": {
          "type": "string"
        },
        "createdAt": {
          "type": "string",
          "readOnly": true
        },
        "updatedAt": {
          "type": "string",
          "readOnly": true
        },
        "status": {
          "type": "string",
          "default": "New"
        }
      }
    },
    "BasketResponse": {
      "properties": {
        "rows": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Basket"
          }
        },
        "length": {
          "type": "number"
        }
      }
    },
    "BasketDTO": {
      "required": [],
      "properties": {
        "id": {
          "type": "string",
          "readOnly": true
        },
        "orderProducts": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/OrderProductDTO"
          },
          "description": "Array of orderProducts IDs"
        },
        "checkout": {
          "type": "string",
          "description": "Checkout ID"
        }
      }
    },
    "Checkout": {
      "properties": {
        "id": {
          "type": "string",
          "readOnly": true
        },
        "address": {
          "type": "object",
          "$ref": "#/definitions/AddressWithoutJoins"
        },
        "payment": {
          "type": "object",
          "$ref": "#/definitions/PaymentCard"
        },
        "basket": {
          "type": "object",
          "$ref": "#/definitions/BasketWithoutJoins"
        },
        "comment": {
          "type": "string"
        }
      }
    },
    "CheckoutResponse": {
      "properties": {
        "rows": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Checkout"
          }
        },
        "length": {
          "type": "number"
        }
      }
    },
    "CheckoutWithoutJoins": {
      "properties": {
        "id": {
          "type": "string",
          "readOnly": true
        },
        "userId": {
          "type": "string"
        },
        "comment": {
          "type": "string"
        }
      }
    },
    "CheckoutDTO": {
      "required": [
        "address",
        "payment",
        "basket"
      ],
      "properties": {
        "id": {
          "type": "string",
          "readOnly": true
        },
        "address": {
          "type": "string",
          "description": "Address ID"
        },
        "payment": {
          "type": "string",
          "description": "Payment ID"
        },
        "basket": {
          "type": "string",
          "description": "Basket ID"
        },
        "comment": {
          "type": "string"
        }
      }
    },
    "OrderProduct": {
      "required": [
        "id",
        "product",
        "inBasket"
      ],
      "properties": {
        "id": {
          "type": "string",
          "readOnly": true
        },
        "product": {
          "type": "object",
          "$ref": "#/definitions/Product"
        },
        "qty": {
          "type": "integer",
          "minimum": 1
        },
        "productPrice": {
          "type": "integer",
          "readOnly": true
        },
        "inBasket": {
          "type": "object",
          "$ref": "#/definitions/Basket"
        }
      }
    },
    "OrderProductResponse": {
      "properties": {
        "rows": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/OrderProduct"
          }
        },
        "length": {
          "type": "number"
        }
      }
    },
    "OrderProductDTO": {
      "required": [
        "productId",
        "qty"
      ],
      "properties": {
        "productId": {
          "type": "string"
        },
        "qty": {
          "type": "integer",
          "minimum": 1
        }
      }
    },
    "PaymentCard": {
      "required": [
        "userId",
        "cardNumber",
        "expirationMonth",
        "expirationYear",
        "cardholder"
      ],
      "properties": {
        "id": {
          "type": "string",
          "readOnly": true
        },
        "userId": {
          "type": "string"
        },
        "cardNumber": {
          "type": "string"
        },
        "expirationMonth": {
          "type": "integer"
        },
        "expirationYear": {
          "type": "integer"
        },
        "cardholder": {
          "type": "string"
        }
      }
    },
    "ReviewDTO": {
      "required": [
        "rating",
        "productId",
        "userId"
      ],
      "properties": {
        "id": {
          "type": "string",
          "readOnly": true
        },
        "rating": {
          "type": "integer",
          "minimum": 1,
          "maximum": 10
        },
        "comment": {
          "type": "string"
        },
        "productId": {
          "type": "string"
        },
        "userId": {
          "type": "string"
        }
      }
    },
    "ReviewResponse": {
      "properties": {
        "rows": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Review"
          }
        },
        "length": {
          "type": "number"
        }
      }
    },
    "Review": {
      "properties": {
        "id": {
          "type": "string",
          "readOnly": true
        },
        "rating": {
          "type": "integer",
          "minimum": 1,
          "maximum": 10
        },
        "comment": {
          "type": "string"
        },
        "createdAt": {
          "type": "string"
        },
        "updatedAt": {
          "type": "string"
        },
        "showOnMain": {
          "type": "boolean",
          "default": false
        },
        "product": {
          "type": "object",
          "$ref": "#/definitions/Product"
        },
        "user": {
          "type": "object",
          "$ref": "#/definitions/User"
        },
        "comments": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Comment"
          }
        },
        "reactions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ReviewReaction"
          }
        }
      }
    },
    "ReviewWithoutJoins": {
      "properties": {
        "id": {
          "type": "string",
          "readOnly": true
        },
        "rating": {
          "type": "integer",
          "minimum": 1,
          "maximum": 10
        },
        "comment": {
          "type": "string"
        },
        "createdAt": {
          "type": "string"
        },
        "updatedAt": {
          "type": "string"
        },
        "showOnMain": {
          "type": "boolean",
          "default": false
        },
        "productId": {
          "type": "string"
        },
        "userId": {
          "type": "string"
        },
        "comments": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Comment"
          }
        },
        "reactions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ReviewReaction"
          }
        }
      }
    },
    "ReviewReaction": {
      "properties": {
        "id": {
          "type": "string"
        },
        "userId": {
          "type": "string"
        },
        "commentId": {
          "type": "string"
        },
        "reaction": {
          "type": "string",
          "default": "Like"
        }
      }
    },
    "User": {
      "required": [
        "firstName",
        "lastName",
        "email",
        "password"
      ],
      "properties": {
        "id": {
          "type": "string",
          "readOnly": true
        },
        "firstName": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "isVerified": {
          "type": "boolean",
          "default": false
        },
        "role": {
          "type": "string"
        }
      }
    },
    "Comment": {
      "properties": {
        "id": {
          "type": "string"
        },
        "user": {
          "type": "object",
          "$ref": "#/definitions/User"
        },
        "review": {
          "type": "object",
          "$ref": "#/definitions/Review"
        },
        "text": {
          "type": "string"
        },
        "createdAt": {
          "type": "string"
        },
        "updatedAt": {
          "type": "string"
        },
        "reactions": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/CommentReaction"
          }
        }
      }
    },
    "CommentReaction": {
      "properties": {
        "id": {
          "type": "string"
        },
        "userId": {
          "type": "string"
        },
        "commentId": {
          "type": "string"
        },
        "reaction": {
          "type": "string",
          "default": "Like"
        }
      }
    },
    "Wishlist": {
      "properties": {
        "id": {
          "type": "string",
          "readOnly": true
        },
        "items": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/WishlistProduct"
          }
        }
      }
    },
    "WishlistProduct": {
      "properties": {
        "id": {
          "type": "string"
        },
        "productId": {
          "type": "string"
        },
        "createdAt": {
          "type": "string",
          "readOnly": true
        },
        "updatedAt": {
          "type": "string",
          "readOnly": true
        }
      }
    },
    "PriceRange": {
      "properties": {
        "minPrice": {
          "type": "number"
        },
        "maxPrice": {
          "type": "number"
        }
      }
    }
  }
}